import com.tylerault.utils.CallbackObject;import com.tylerault.utils.LogicUtils;/*** * 'Scrubs', i.e. allows a user to grab and slide the mouse on a movieclip, * returning the location on a given axis as a percentage. * Example: a progress bar in a video or audio player * Note: the class is configured so that the 'scrubTrack' can run in any direction. * * @author Tyler Ault [tault@digitas.com] ***/class com.tylerault.gui.Scrubber{	/***	 * Indicators for the orientation of the scrubber (FROM_TO)	 ***/	public static var LEFT_RIGHT = 100;	public static var RIGHT_LEFT = 200;	public static var DOWN_UP = 300;	public static var UP_DOWN = 400;	private var axis:String; // "x" or "y"	private var direction:Number; // 1 or -1	private var measure:String; // "_width" or "_height"	private var scrubTrack:MovieClip;	private var scrubBar:MovieClip;	//private var numCount:MovieClip;	private var scrubKnob:MovieClip;	private var scaling:Boolean;	private var scrubHandler:CallbackObject;	private var changeCallback:CallbackObject;	private var releaseCallback:CallbackObject; 	private var percentage:Number; // from 0 to 1	private var scrubLimit:Number = 1; // from 0 to 1	/***	 * Constructor.	 * @param newScaling boolean determining whether we are scaling (true) or	 *        moving (false) the scrubBar.	 ***/	/*function Scrubber( newScrubTrack:MovieClip, newScrubBar:MovieClip, newNumberCounter:MovieClip,		newDirection:Number, newCallback:CallbackObject, newScaling:Boolean )*/	function Scrubber( newScrubTrack:MovieClip, newScrubBar:MovieClip, 		newDirection:Number, newCallback:CallbackObject, newScaling:Boolean )	{		this.scrubTrack = newScrubTrack;		//trace ("newScrubTrack: "+newScrubTrack);		this.scrubBar = newScrubBar;		//trace ("scrubBar: "+scrubBar);		//this.numCount = newNumberCounter;		this.changeCallback = newCallback;		//trace ("changeCallback: "+changeCallback);		this.scaling = LogicUtils.exists( newScaling ) ? newScaling : true;		//trace ("scaling: "+scaling);		// Determine actual direction and axis for scrubber		switch( newDirection )		{			case RIGHT_LEFT :				this.axis = "x";				this.direction = -1;				this.measure = "_width";				break;			case DOWN_UP :				this.axis = "y";				this.direction = 1;				this.measure = "_height";				break;			case UP_DOWN :				this.axis = "y";				this.direction = -1;				this.measure = "_height";				break;			default:				this.axis = "x";				this.direction = 1;				this.measure = "_width";				break;		}		this.percentage = 0;		// Set up interactivity		this.scrubHandler = new CallbackObject( this, engageScrub );		var theScrubber:Scrubber = this;		this.scrubTrack.onPress = function() { theScrubber.scrubberPressed.apply( theScrubber ); }		this.scrubTrack.onRelease = function() { theScrubber.scrubberReleased.apply( theScrubber ); }		this.scrubTrack.onReleaseOutside = this.scrubTrack.onRelease;	}	public function scrubberPressed() : Void	{ this.scrubHandler.eachFrame( this.scrubTrack, [ true ] ); }	public function scrubberReleased() : Void	{ this.scrubHandler.run( false ); }	/***	 * Called every frame once the scrubber has been pressed,	 * or once it is released, causing the scrubber to engage	 * or disengage, respectively.	 * @param engage a boolean denoting whether or not to engage	 ***/	public function engageScrub( engage:Boolean ) : Void	{		var mouseValue:Number = this.scrubTrack[ "_" + this.axis + "mouse" ];		var newPercent:Number = ( mouseValue / this.scrubTrack[ this.measure ] );		var oldPercent:Number = this.percentage;		newPercent = setPercentage( newPercent );		if( oldPercent != newPercent )		{			this.changeCallback.run( newPercent );		}		if( engage == false )		{			this.scrubTrack.onEnterFrame = null;			this.releaseCallback.run(); 		}	}	/***	 * Dual purpose: sets the percentage of the scrubber and	 * updates the visuals based upon the direction and axis.	 * Also, if a scrubLimit has been set, the scrubber cannot surpass that limit.	 * @param value a number in the range { 0 <= N <= 1 }	 * @returns a number in the same range of the value that was actually set	 ***/	public function setPercentage( value:Number ) : Number	{		if( value > 1 ) { value = 1; }		if( value <= 0 ) { value = 0.01; }		if( value > this.scrubLimit ) { value = this.scrubLimit; }		this.percentage = value;		// TODO: handle visuals where scaling == false		this.scrubBar[ "_" + this.axis + "scale" ] = this.percentage *				this.scrubTrack[ "_" + this.axis + "scale" ];		this.scrubKnob[ "_" + this.axis ] = scrubBar[ "_" + this.axis ] + scrubBar[ this.measure ];		//Here send the value of the porcentage loaded		//this.numCount["txt_text"] = (this.percentage*100);		return this.percentage;	}	/***	 * A callback to run on releasing the scrubber	 ***/	public function setReleaseCallback( callback:CallbackObject )	{ this.releaseCallback = callback; }	public function setScrubKnob( newKnob_mc:MovieClip ) : Void	{		var theScrubber:Scrubber = this;		this.scrubKnob = newKnob_mc;		this.scrubKnob.onPress = function() { theScrubber.scrubberPressed.apply( theScrubber ); }		this.scrubKnob.onRelease = function() { theScrubber.scrubberReleased.apply( theScrubber ); }		this.scrubKnob.onReleaseOutside = this.scrubKnob.onRelease;	}	/***	 * Sets a limit on the percentage to which the scrubber can be dragged	 * @param percentLimit a number between 0 and 1	 ***/	public function setScrubLimit( percentLimit:Number ) : Void	{ this.scrubLimit = percentLimit; }}