import com.tylerault.media.SoundManager;import com.tylerault.media.VideoControl;import com.tylerault.media.VideoManager;import com.tylerault.utils.CallbackObject;import com.tylerault.utils.LogicUtils;/*** * A generic Video Player class: * - Contains the embeded video object * - Handles the netstream and video playback via a VideoManager * - Ties in a VideoControl object for user interaction * * @author Tyler Ault [tault@digitas.com] ***/class com.tylerault.media.VideoPlayer{	private var container_mc:MovieClip;	private var videoManager:VideoManager;	private var videoControl:VideoControl;	private var soundManager:SoundManager;	private var audioId:String	private var videoFinishedCallback:CallbackObject;	function VideoPlayer( newContainer:MovieClip, newSoundManager:SoundManager,		newVideoFile:String, autoPlayBuffer:Number )	{		this.container_mc = newContainer;		this.soundManager = newSoundManager;		this.videoManager = new VideoManager( container_mc.videoHolder );		this.videoManager.setFinishedCallback( new CallbackObject( this, videoFinished ) ); 		// this.videoManager.setStartedCallback( new CallbackObject( this, videoLoaded ) ); 		setControlClip( this.container_mc );		if( LogicUtils.exists( newVideoFile ) )		{ loadVideo( newVideoFile, autoPlayBuffer ); }	}	/***	 * Opens a given file in the player, or the file currently loaded	 ***/	public function loadVideo( newFile:String, autoPlayBuffer:Number )	{		this.videoManager.closeStream();		this.videoManager.loadVideo( newFile, autoPlayBuffer );		videoLoaded(); 	}	public function streamVideo( newFile:String, autoPlayBuffer:Number )	{		this.videoManager.closeStream();		this.videoManager.getVideo().clear();		this.videoManager.streamVideo( newFile, autoPlayBuffer );	}	/***	 * Called once the video has loaded	 ***/	public function videoLoaded()	{		this.videoControl.enableAll();		this.soundManager.deleteSound( this.audioId );		this.audioId = this.soundManager.addSoundEntry( true );		var audio_mc = this.soundManager.getSoundClip( this.audioId );		audio_mc.attachAudio( this.videoManager.getNetStream() );		this.soundManager.setSoundVolume( this.audioId ); // sets the volume on the stream's sound	}	/***	 * Called once the video has finished loading 	 * Starts the video and enables the buttons, ensuring PlayPause shows pause state	 ***/	public function playVideo()	{		this.videoManager.setPlaying( true );		this.videoManager.setFinishedCallback( new CallbackObject( this, videoFinished ) );		this.videoControl.setPlayPauseState( VideoControl.PAUSE_STATE );	}	public function stopVideo()	{		this.videoManager.closeStream();	}	public function videoFinished() : Void	{		this.videoControl.setPlayPauseBehavior( VideoControl.REWIND_AND_PLAY );		this.videoFinishedCallback.run();	}	public function getVideoManager() : VideoManager	{		return this.videoManager;	}	public function setControlClip( newControlClip:MovieClip )	{		delete this.videoControl;		this.videoControl = new VideoControl( newControlClip,			this.videoManager, this.soundManager );		this.videoControl.disableAll();	}	public function setControl( newControl:VideoControl ) : Void 	{ this.videoControl = newControl; }	public function getControl() : VideoControl	{		return this.videoControl;	}	public function getMetaData() : Object	{		return this.videoManager.getMetaData();	}		public function setMetaDataCallback( newCallback:CallbackObject ) : Void	{		this.videoManager.setMetaDataCallback( newCallback );	}	public function setVideoFinishedCallback( newCallback:CallbackObject ) : Void	{		this.videoFinishedCallback = newCallback;	}	public function setBufferTime( newMilliseconds:Number ) : Void	{		this.videoManager.getNetStream().setBufferTime( newMilliseconds / 1000 );	}	public function setBufferPercent( newPercent:Number ) : Void	{		this.videoManager.setBufferPercent( newPercent );	}}