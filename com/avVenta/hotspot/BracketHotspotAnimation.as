import com.avVenta.hotspot.*;import mx.utils.Delegate;class com.avVenta.hotspot.BracketHotspotAnimation extends HotspotAnimationBase{		private var mcLabel:MovieClip;	private var mcPlus:MovieClip;	private var mcArrows:MovieClip;	private var mcBracketLeft:MovieClip;	private var mcBracketRight:MovieClip;		private var mcContent:HotspotContentBase;		private var initLeftX:Number;	private var initRightX:Number;		public function BracketHotspotAnimation(){		this.mcLabel._visible = false;		this.mcLabel._alpha = 0;				this.mcArrows._visible = false;		this.mcArrows._alpha = 0;					this.mcLabel.tf.autoSize = "right";			this.initLeftX = this.mcBracketLeft._x;		this.initRightX = this.mcBracketRight._x;				addEventListener("onContentClosed", this);	}		public function showRollOver(){		super.showRollOver();				this.mcLabel._visible = true;		this.mcArrows._visible = true;		this.mcLabel.tf.text = this._parent.getLabel();		var newWidth = mcLabel._width + 20 + this.mcArrows._width;		mcBracketLeft.slideTo((initLeftX - (newWidth/2)), mcBracketLeft._y, .5)		mcBracketRight.slideTo((initRightX + (newWidth/2)) - 8, mcBracketRight._y, .5)		this.mcPlus.alphaTo(0, .4);		var bounds = this.mcLabel.getBounds();		var middle = bounds.xMin + (newWidth/2);		this.mcLabel._x = -1 * middle;		this.mcArrows._x = this.mcLabel._x + 20;		this.mcArrows.alphaTo(100, .5,  "linear");		this.mcLabel.alphaTo(100, .5,  "linear", 0, Delegate.create(this, showRollOverEnd));			}	public function hideRollOver(){		super.hideRollOver();		mcBracketLeft.slideTo(initLeftX, mcBracketLeft._y, .5);		mcBracketRight.slideTo(initRightX, mcBracketRight._y, .5);		mcPlus.alphaTo(100, .5, "linear", 0, Delegate.create(this, hideRollOverEnd));			mcLabel.alphaTo(0, .2);			mcArrows.alphaTo(0, .2);		}		private function hideRollOverEnd(){		this.mcLabel._x = 0;				this.mcLabel._visible = false;		this.mcLabel.tf.text = "";		this.mcArrows._x = 0;				broadcastEvent(BracketHotspotAnimation.HIDEROLLOVEREND);	}	private function showRollOverEnd(){		broadcastEvent(BracketHotspotAnimation.SHOWROLLOVEREND);	}		public function showContent(){		super.showContent();		this.mcLabel._x = 0;		this.mcLabel._visible = false;		this.mcLabel.tf.text = "";						this.mcArrows._visible = false;		this.mcArrows._alpha = 0;				this.mcArrows._x = 0;				mcContent = HotspotContentBase(this.attachMovie("HotspotContent_mc", "mcContent", 0, {_xscale: 1, _yscale: 1}));				var x:Number = this._parent._x >= (this._parent.getParent().getWidth() / 2) ? this._parent._x  - mcContent.width : this._parent._x;		var y:Number = this._parent._y >= (this._parent.getParent().getHeight() / 2) ? this._parent._y  - mcContent.height : this._parent._y;				var left:Number = x;		var right:Number = x + mcContent.width;		var top:Number = y;		var bottom:Number = y + mcContent.height;				var newX:Number =  left < 0 ? (x + Math.abs(left) - this._parent._x) : 							(right > this._parent.getParent().getWidth() ? x - (right - this._parent.getParent().getWidth()) - this._parent._x : x - this._parent._x ) ;		var newY:Number =  top < 0 ? (y + Math.abs(top) - this._parent._y) : 							(bottom > this._parent.getParent().getHeight() ? y - (bottom - this._parent.getParent().getHeight()) - this._parent._y : y - this._parent._y ) ;		mcContent.tween(["_xscale","_yscale", "_x", "_y"], [100, 100, newX, newY], 0.5, "easeOutExpo", 0, Delegate.create(this, showContentEnd));		mcBracketLeft._visible = false;		mcBracketRight._visible = false;		mcPlus._visible = false;		mcLabel._visible = false;				mcBracketLeft.slideTo(initLeftX, mcBracketLeft._y, .5);		mcBracketRight.slideTo(initRightX, mcBracketRight._y, .5);		}	public function hideContent(){		super.hideContent();		mcContent.tween(["_xscale","_yscale", "_x", "_y"], [1, 1, 0, 0], 0.3, "easeInExpo", 0, Delegate.create(this, hideContentEnd));						mcPlus.alphaTo(100, .5, "linear")	}			private function hideContentEnd(){		mcBracketLeft._visible = true;		mcBracketRight._visible = true;		mcPlus._visible = true;		mcLabel._visible = true;				mcContent.removeMovieClip();				broadcastEvent(BracketHotspotAnimation.HIDECONTENTEND);	}	private function showContentEnd(){				broadcastEvent(BracketHotspotAnimation.SHOWCONTENTEND);			}		private function onContentClosed(){		trace("ContentClosed");		hideContent();	}	}