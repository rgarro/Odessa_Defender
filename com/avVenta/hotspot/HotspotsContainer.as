import com.avVenta.events.IBroadcastable;import com.avVenta.hotspot.*;import mx.utils.Delegate;import com.avVenta.events.BroadcastableMovieClip;class com.avVenta.hotspot.HotspotsContainer extends BroadcastableMovieClip{		static public var LINKAGE:String = "__Packages.com.avVenta.hotspot.HotspotsContainer";	static private var REGISTER:Object = Object.registerClass(LINKAGE, HotspotsContainer);		public static var SETHOTSPOTSSTATE:String = "onSetHotspotsState";	public static var HOTSPOTCONTENTSHOW:String = "onHotspotContentShow";	public static var HOTSPOTCONTENTHIDE:String = "onHotspotContentHide";		private var hotspots:Array;	private var hsIndex:Number = 0;		private var currentDisplayedHotspot:Hotspot;		private var width:Number;	private var height:Number;		public function HotspotsContainer(){		this.hotspots = new Array();				this.currentDisplayedHotspot = null;			}		private function onLoad(){		this.addEventListener(HotspotsContainer.HOTSPOTCONTENTSHOW, this, "onShowHotspotContent");		this.addEventListener(HotspotsContainer.HOTSPOTCONTENTHIDE, this, "onHideHotspotContent");	}		public static function create(container:MovieClip, name:String, depth:Number, initObj:Object):HotspotsContainer{				if (!depth) depth = container.getNextHighestDepth();				return HotspotsContainer(container.attachMovie(HotspotsContainer.LINKAGE, name, depth, initObj));			}			public function addHotspot():Hotspot{		var hs = this.attachMovie("Hotspot_mc", "hs" + hsIndex, hsIndex);		hotspots.push(hs);		hsIndex++;		return hs;	}		public function getHotspots(label:String, data:Object):Array{		return hotspots;	}		public function getHotspotAt(index:Number):Hotspot{		return hotspots[index];	}		public function setPosition(x:Number, y:Number){		this._x = x;		this._y = y;	}		public function setSize(w: Number, h:Number){		this.width = w;		this.height = h;	}		public function getWidth():Number{		return this.width;	}		public function getHeight():Number{		return this.height;	}			private function onShowHotspotContent(source, evtObj){		this.currentDisplayedHotspot = evtObj.displayedHotspot;	}		private function onHideHotspotContent(source, evtObj){		this.currentDisplayedHotspot = null;	}		public function getCurrentDisplayedHotspot():Hotspot{		return this.currentDisplayedHotspot;	}		public function isDisplayingHotspot():Boolean{		return this.currentDisplayedHotspot != null;	}	}