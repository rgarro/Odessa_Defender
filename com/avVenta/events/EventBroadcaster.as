/** * This class controls the event messaging system. * * Classes using this system are required to implement IBroadcastable * and create an instance of EventBroadcaster to make the  * corresponding operations. * * @author Marco A. Alvarado * @version 1.0.1 2007-02-16 Note: added multi-method listener in this build (JC). */class com.avVenta.events.EventBroadcaster {		// constants	static private var DEBUG = true;		// variables	private var registeredListeners:Array;	public var name:String;		/**	 * Constructor.	 */	public function EventBroadcaster() {		name = "EventBroadcaster";			registeredListeners = new Array();	}	/**	 * Assigns a listener to a given event.	 *	 * @param  event  String  The name of the event.	 * 	 * @param  listener  Object  The object that will receibe the event.	 * 	 * @param methodName String An alternative name of the method that will be called when the event is dispatched, 	 *if the parameter is null, it will have the same name that the event.	 *	 */	public function addEventListener(event:String, listener:Object, methodName:String):Void {					if (registeredListeners[event] == null) registeredListeners[event] = new Array();				if (DEBUG) trace('adding listener "'+listener+'" to event "'+event+'"');				if(!methodName) methodName = event;				registeredListeners[event].push({target:listener, methodName:methodName});	}		/**	 * Calls each listener assigned to the given event. The event will	 * receibe source and data.	 *	 * @param  event  String  The name of the event.	 * @param  source  Object  The object that generated the broadcast.	 * @param  data  Object  The data that will be sent to the registeredListeners.	 */	public function broadcastEvent(event:String, source:Object, data:Object):Void {		var length:Number = registeredListeners[event].length;		for (var i = 0; i < length; i++){  		if (DEBUG) trace('sending event "'+event+'" to "'+registeredListeners[event][i].target+'" with data: '+data);  			var methodName:String = registeredListeners[event][i].methodName;			registeredListeners[event][i].target[methodName](source, data);		}	}		/**	 * Unassigns the registeredListeners of the given event.	 *	 * @param  event  String  The name of the event.	 * @param  listener  Object  The object that will be removed.	 */	public function removeEventListener(event:String, listener:Object, methodName:String):Void {		if(!methodName) methodName = event;		for (var i = 0; i < registeredListeners[event].length; i++)			if (registeredListeners[event][i].methodName == methodName) 			{				if (DEBUG) trace('removing listener "'+listener.name+'"');				registeredListeners[event].splice(i, 1);				break;			}	}}