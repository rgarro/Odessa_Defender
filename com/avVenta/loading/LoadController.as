/** * This class controls the loading of images (jpg, swf, gif, xml). * also it enable you to enqueue messages * * @author Jorge Porras * @version 1.0.0 2007-01-18*/import com.avVenta.loading.LoadingItem;import com.avVenta.events.*;class com.avVenta.loading.LoadController implements IBroadcastable{		static private var instance:LoadController;	private var broadcaster:EventBroadcaster;		private var loadingQueue:Array;	private var loading:Boolean;		static public var LOADED_ITEM_EVENT = "onLoadedItem";	static public var LOAD_ERROR_EVENT = "onLoadError";	static public var ON_QUEUE_EMPTY_EVENT:String = "onLoadingQueueEmpty";		public var name:String;		/**	 * @return singleton instance of LoadController	 */	public static function getInstance() : LoadController {		if (instance == null)			instance = new LoadController();		return instance;	}		private function LoadController(){		name = "LoadController";		this.loadingQueue = new Array();		this.loading = false;		this.broadcaster = new EventBroadcaster();	}		/*public function loadItem(itemToLoad:LoadingItem){		if (LoadController.instance == undefined)			LoadController.instance = new LoadController();			LoadController.instance.addLoad(itemToLoad);	}*/		public function addLoad(itemToLoad:LoadingItem){		this.loadingQueue.push(itemToLoad);			}		public function startLoad(Void){				if (!this.loading){			this.nextLoad();		}	}		private function onLoad(){				var itemLoaded = this.loadingQueue.shift();		broadcastEvent(LoadController.LOADED_ITEM_EVENT, itemLoaded);				if (this.loadingQueue.length > 0){			this.nextLoad();		}else{			this.loading = false;			broadcastEvent(LoadController.ON_QUEUE_EMPTY_EVENT);		}	}		private function nextLoad(){		loadingQueue[0].addEventListener(LoadingItem.ONLOAD_EVENT, this);		loadingQueue[0].addEventListener(LoadingItem.ONLOADERROR_EVENT, this);		loadingQueue[0].load();		this.loading = true;		}		private function onLoadError(){				var itemLoaded = this.loadingQueue.shift();		broadcastEvent(LoadController.LOAD_ERROR_EVENT, itemLoaded);				if (this.loadingQueue.length > 0){			this.nextLoad();		}else{			this.loading = false;			broadcastEvent(LoadController.ON_QUEUE_EMPTY_EVENT);		}			}			public function addEventListener(eventName : String, listener : Object, methodName : String) : Void	{		broadcaster.addEventListener(eventName, listener, methodName);	}	public function broadcastEvent(eventName : String, data : Object) : Void	{		broadcaster.broadcastEvent(eventName, this, data);	}	public function removeEventListener(eventName : String, listener : Object, methodName : String) : Void	{		broadcaster.removeEventListener(eventName, listener, methodName);	}	public function toString(Void):String	{		return "[SkinFlashLibraryManager]";	}}