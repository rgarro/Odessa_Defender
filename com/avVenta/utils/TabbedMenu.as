import com.avVenta.events.BroadcastableMovieClip;import com.avVenta.utils.MenuTab;class com.avVenta.utils.TabbedMenu extends BroadcastableMovieClip{		static public var LINKAGE:String = "__Packages.com.avVenta.utils.TabbedMenu";	static private var REGISTER:Object = Object.registerClass(LINKAGE, TabbedMenu);		public static var INIT:String = "onInit";	public static var ENABLE:String = "onEnable";	public static var DISABLE:String = "onDisable";	public static var TABROLLOVER:String = "onTabRollOver";	public static var TABROLLOUT:String = "onTabRollOut";	public static var TABRELEASE:String = "onTabRelease";	public static var TABSELECTED:String = "onTabSelected";		private var tabs:Array;		public var tabLinkName:String;	public var tabDistance:Number;	public var dividerLinkName:String;	public var align:String = "left";	private var defaultTabIndex:Number; 		private var selectedTab:MenuTab = null;		public function TabbedMenu(){		this.tabs = new Array();		this.tabLinkName = "MenuTab_mc";		this.tabDistance = 0;	}		public static function create(container:MovieClip, name:String, depth:Number, initObj:Object):TabbedMenu{				if (!depth) depth = container.getNextHighestDepth();				return TabbedMenu(container.attachMovie(TabbedMenu.LINKAGE, name, depth, initObj));			}				public function init(tabs:Array, defaultTabIndex:Number){		for (var i = 0; i < tabs.length; i++){			this.addTab(tabs[i]);		}		this.defaultTabIndex = defaultTabIndex;	}		private function onLoad(){		if (this.defaultTabIndex != undefined){			/*this.selectedTab = this.tabs[this.defaultTabIndex];			this.selectedTab.select();			this.selectedTab.swapDepths(this.getNextHighestDepth());*/			this.select(defaultTabIndex);		}		broadcastEvent(TabbedMenu.INIT, {});			}		public function addTab(tab:Object){		var newTab = this.attachMovie(this.tabLinkName, "mcTab"+this.tabs.length, this.tabs.length);		this.tabs.push(newTab);		newTab.init(this.tabs.length - 1, tab);	}		public function getPreviusTab(tab:MenuTab):MenuTab{		if (tab.getIndex() == 0)			return null;		else			return this.tabs[tab.getIndex() - 1];	}		public function registerTabEvents(tab:MenuTab){		tab.addEventListener(MenuTab.ROLLOVER, this, "onTabRollOver");		tab.addEventListener(MenuTab.ROLLOUT, this, "onTabRollOut");		tab.addEventListener(MenuTab.RELEASE, this, "onTabRelease");	}		private function onTabRollOver(target, data){		broadcastEvent(TabbedMenu.TABROLLOVER, {tab: target, data: data});	}	private function onTabRollOut(target, data){		broadcastEvent(TabbedMenu.TABROLLOUT, {tab: target, data: data});	}	private function onTabRelease(target, data){		broadcastEvent(TabbedMenu.TABRELEASE, {tab: target, data: data});		this.select(target.getIndex());	}		public function disable(){		broadcastEvent(TabbedMenu.DISABLE, {});	}		public function enable(){		broadcastEvent(TabbedMenu.ENABLE, {});	}		public function select(index:Number){		if (this.selectedTab != null)			this.selectedTab.unselect();		this.selectedTab = this.tabs[index];		this.selectedTab.select();		this.selectedTab.swapDepths(this.getNextHighestDepth());		broadcastEvent(TabbedMenu.TABSELECTED, {tab: this.selectedTab, index: index});	}		public function clearSelection(){		this.selectedTab.unselect();		this.selectedTab = null;	}		public function getSelectTab(){		return this.selectedTab;	}	}