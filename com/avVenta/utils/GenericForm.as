import mx.utils.Delegate;dynamic class com.avVenta.utils.GenericForm extends MovieClip{		private var btnSend:Button	private var fields:Array;	private var submitAction:String;	private var errorAction:String;	private var url:String;	private var errorColor:Number;	private var noErrorColor:Number;	private var errorDetail:Object;		public function GenericForm(){		stop();	}		public function init(url:String, fields:Array, sendButton:Button, errorColor:Number, noErrorColor:Number, sumbitAction:String, errorAction:String){		this.btnSend = sendButton;						this.fields = fields;				for (var i = 0; i < this.fields.length; i++){			var field = this.fields[i];			if (field.visible != "hidden"){								this[field.componentName].tabIndex = (i + 1);								switch (field.type){					case "text":{						this[field.componentName].maxChars = (field.maxChars != undefined) ? field.maxChars : 0;						this[field.componentName].restrict = (field.restrict != undefined) ? field.restrict : "";						if (field.required){							this[field.componentName].onChanged = this[field.onChanged];						}						break;					}					case "combo":{						break;					}							case "check":{						break;					}										}							}		}				this.errorColor = errorColor;		this.noErrorColor = noErrorColor;				this.submitAction = submitAction;		this.errorAction = errorAction;		this.url = url;				this.btnSend.onRelease = mx.utils.Delegate.create(this, sendForm);	}		private function sendForm(){		if (this.validate())			this.submit();		else			this[this.errorAction](this.errorDetail);	}		private function submit(){    			var send_lv:LoadVars = new LoadVars();		//var send_lv:MovieClip = _root.createEmptyMovieClip("form", _root.getNextHighestDepth());		var hiddenFields:String = "";		var strFields:String = "";		for (var i = 0; i < this.fields.length; i++){			var field = this.fields[i];			if (field.visible != "hidden"){				switch (field.type){					case "text":{						send_lv[field.fieldName] = this[field.componentName].text;						if (strFields == "")							strFields += field.fieldName + ": '" + this[field.componentName].text+"'";						else							strFields += "," + field.fieldName + ": '" + this[field.componentName].text+"'";																		break;					}					case "combo":{						if (this[field.componentName].value.id != undefined){							send_lv[field.fieldName] = this[field.componentName].value.id;											if (strFields == "")								strFields += field.fieldName + ": '" + this[field.componentName].value.id+"'";							else								strFields += "," + field.fieldName + ": '" + this[field.componentName].value.id+"'";																						}else{							send_lv[field.fieldName] = "";														if (strFields == "")								strFields += field.fieldName + ": ''";							else								strFields += "," + field.fieldName + ": ''";							}						break;					}							case "check":{						send_lv[field.fieldName] = this[field.componentName].selected;												if (strFields == "")							strFields += field.fieldName + ": '" + this[field.componentName].selected+"'";						else							strFields += "," + field.fieldName + ": '" + this[field.componentName].selected+"'";																				break;					}											}							}else{				if (hiddenFields == "")					hiddenFields += "'"+field.fieldName + "': '" + field.value+"'";				else					hiddenFields += ",'" + field.fieldName + "': '" + field.value+"'";				//send_lv[field.fieldName] = field.value;			}		} 		//if (hiddenFields != "")		//	hiddenFields += "&";					//_root.getURL(this.url+"?"+hiddenFields+send_lv, "_self");		//_root.getURL(this.url+"?"+send_lv, "_self");		//trace("strFields :: "+strFields)		//trace("hiddenFields :: "+hiddenFields)		getURL("javascript: quickSearch({"+strFields+"});");//		getURL("javascript: quickSearch({"+strFields+", "+hiddenFields+"});");		//getURL("javascript:alert('++ WORKING ++');");		//_root.getURL("javascript: quickSearch("+strFields+", "+hiddenFields+");");				if (this[this.submitAction] != undefined);			this[this.submitAction]();	}		function validate():Boolean{		var error:Boolean = false;		if (this.errorDetail != undefined)			delete this.errorDetail;		this.errorDetail = new Object();				for (var i = 0; i < this.fields.length; i++){			var field = this.fields[i];						if (field.visible != "hidden"){				if (field.required){					switch (field.type){						case "text":{							if (field.validate != undefined){								if (!this[field.validate](this[field.componentName].text)){									this.errorDetail[field.fieldName] = field;									error = this.markFieldError(field);								}							}else{								if (this[field.componentName].text == ""){									this.errorDetail[field.fieldName] = field;									error = this.markFieldError(field);								}							}							break;						}						case "combo":{							if (field.validate != undefined){								if (!this[field.validate](this[field.componentName].value)){									this.errorDetail[field.fieldName] = field;									error = this.markFieldError(field);								}							}else{								if (this[field.componentName].value == undefined){									this.errorDetail[field.fieldName] = field;									error = this.markFieldError(field);								}							}							break;						}							case "check":{							break;						}													}				}			}					}				return !error;	}		private function markFieldError(field:Object):Boolean{		if (field.type == "text"){			this[field.componentName].borderColor = this.errorColor;			}		return true;	}		}