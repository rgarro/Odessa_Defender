import mx.utils.Delegate;import com.avVenta.utils.ScrollBar;class com.avVenta.utils.ComboBox extends MovieClip{		private static var INDEX:Number = 0;	private static var activeCombo:ComboBox;		private var txtLabel:TextField;	private var btnDropDown:MovieClip;	private var mcBackground:MovieClip;	private var selectedValue:Object;	private var dropDownMenu:MovieClip;	private var dropDownMenuMask:MovieClip;		private var showingMenu:Boolean;		private var defaultLabel:String;	private var defaultValue:Object;		private var linkedCombos:Array; //{linkedCombo: combo, dataField:""}		public var dataProvider:Array;		public function ComboBox(){		this.showingMenu = false;		this.watch("dataProvider", updateDataProvider, null);		this.selectedValue = null;				if (this._xscale > this._yscale){			this.btnDropDown._yscale = this.btnDropDown._xscale = this._yscale;		}else{			this.btnDropDown._yscale = this.btnDropDown._xscale = this._xscale;		}		this.mcBackground._xscale = this._xscale;		this.mcBackground._height = this.btnDropDown._height;		this.btnDropDown._x = this.mcBackground._width + 1;		this._xscale = this._yscale = 100;		this.txtLabel._width = this.mcBackground._width - 2;		this.txtLabel._height = this.mcBackground._height - 2;					this.onRelease = Delegate.create(this, showDropDownMenu);				this.useHandCursor = false;				this.linkedCombos = new Array();			}		public function init(){	}		public function setDefault(label:String, value:Object){		this.defaultLabel = label;		this.defaultValue = value		if (this.selectedValue == undefined){			this.selectedValue = value			this.txtLabel.text = label;		}	}		public function showDropDownMenu(){		if (!this.showingMenu){			if (this.dropDownMenu == undefined){				this.dropDownMenu = this._parent.createEmptyMovieClip("dropDownMenu"+ComboBox.INDEX, this._parent.getNextHighestDepth());				this.dropDownMenuMask = this._parent.attachMovie("DropDownMask_mc", "dropDownMenuMask"+ComboBox.INDEX++, this._parent.getNextHighestDepth(), {_width: this._width});					this.dropDownMenu._visible = false;								this.dropDownMenuMask._x = this.dropDownMenu._x = this._x;				this.dropDownMenuMask._y = this.dropDownMenu._y = this._y + this._height + 1;				this.dropDownMenu.attachMovie("DropDownMask_mc", "mcMask", 3, {_width: this._width});				this.dropDownMenu.createEmptyMovieClip("mcItems", 2);								for (var i = 0; i < this.dataProvider.length; i++){					this.dropDownMenu.mcItems.attachMovie("DropDownItem_mc", "mcItem"+i, i);					this.dropDownMenu.mcItems["mcItem"+i]._y = (i * this.dropDownMenu.mcItems["mcItem"+i]._height) - (1 * i);					this.dropDownMenu.mcItems["mcItem"+i].txtLabel.text = this.dataProvider[i].label;					this.dropDownMenu.mcItems["mcItem"+i].mcBackground._visible = false;					this.dropDownMenu.mcItems["mcItem"+i].mcBackground._width = this._width - 2;					this.dropDownMenu.mcItems["mcItem"+i].mcBackground._x++;										this.dropDownMenu.mcItems["mcItem"+i].onRollOver = function(){						this.mcBackground._visible = true;					}					this.dropDownMenu.mcItems["mcItem"+i].onRollOut = function(){						this.mcBackground._visible = false;					}												this.dropDownMenu.mcItems["mcItem"+i].combobox = this;					this.dropDownMenu.mcItems["mcItem"+i].index = i;					this.dropDownMenu.mcItems["mcItem"+i].onRelease = function(){						this.combobox.selectItem(this.index);					};				}								if (this.dropDownMenu.mcItems._height > this.dropDownMenu.mcMask._height){					this.dropDownMenu.attachMovie("Scroll_mc", "mcScrollBar", 4);					this.dropDownMenu.mcScrollBar._x = this._width - this.dropDownMenu.mcScrollBar._width;					this.dropDownMenu.mcScrollBar.init(this.dropDownMenu.mcMask._height);													this.dropDownMenu.mcScrollBar.updatePosition = Delegate.create(this, scrollItems);									}								this.dropDownMenu.createEmptyMovieClip("mcBackground", 1);				this.dropDownMenu.mcBackground.moveTo(0, 0);				this.dropDownMenu.mcBackground.lineStyle(1, 0x9a999d);				this.dropDownMenu.mcBackground.beginFill(0xffffff, 100);				this.dropDownMenu.mcBackground.lineTo(this._width - 1, 0);				if (this.dropDownMenu.mcItems._height > this.dropDownMenu.mcMask._height){					this.dropDownMenu.mcBackground.lineTo(this._width - 1, this.dropDownMenu.mcMask._height);					this.dropDownMenu.mcBackground.lineTo(0, this.dropDownMenu.mcMask._height);				}else{					this.dropDownMenu.mcBackground.lineTo(this._width - 1, this.dropDownMenu.mcItems._height + 1);					this.dropDownMenu.mcBackground.lineTo(0, this.dropDownMenu.mcItems._height + 1);									}				this.dropDownMenu.mcBackground.lineTo(0, 0);				this.dropDownMenu.mcBackground.endFill();												this.dropDownMenu.mcItems.setMask(this.dropDownMenu.mcMask);				this.dropDownMenu.setMask(this.dropDownMenuMask);			}			this.dropDownMenu._y -= this.dropDownMenu._height;			this.dropDownMenu._visible = true;			this.dropDownMenu.tween("_y", this._y + this._height + 1, 0.4, "easeOutQuint");			this.showingMenu = true;			if (ComboBox.activeCombo != undefined)				ComboBox.activeCombo.hideDropDownMenu();			ComboBox.activeCombo = this;					}else{			this.hideDropDownMenu();		}	}		public function onMouseDown(){		if (this.showingMenu){			if (!this.hitTest(_root._xmouse, _root._ymouse, true) && !this.dropDownMenu.hitTest(_root._xmouse, _root._ymouse, true) )				this.hideDropDownMenu();		}			}		public function scrollItems(position, mode){		if (mode == "tween"){			var amount = this.dropDownMenu.mcItems._height - this.dropDownMenu.mcMask._height;			this.dropDownMenu.mcItems.tween("_y", 0 - (amount * (position / 100)), 0.4, "easeOutQuint");		}else{			var amount = this.dropDownMenu.mcItems._height - this.dropDownMenu.mcMask._height;			this.dropDownMenu.mcItems._y = 0 - (amount * (position / 100));		}	} 		public function hideDropDownMenu(){		this.dropDownMenu.tween("_y", this.dropDownMenu._y - this.dropDownMenu._height, 0.3, "easeInQuint", 0, function(){this._visble = false});		this.showingMenu = false;		if (ComboBox.activeCombo == this)			ComboBox.activeCombo = undefined;	}		public function selectItem(index){		this.txtLabel.text = this.dataProvider[index].label;		this.selectedValue = this.dataProvider[index].data;		this.hideDropDownMenu();		for (var i in this.linkedCombos){			this.linkedCombos[i].linkedCombo.dataProvider = this.selectedValue[this.linkedCombos[i].dataField];		}	}		public function setPos(x:Number, y:Number){		this._x = x;		this._y = y;	}		public function updateDataProvider(prop, oldValue, newValue, userData){		this.txtLabel.text = this.defaultLabel;		this.selectedValue = this.defaultValue;		this.selectedValue = undefined;				if (this.dropDownMenu != undefined){			this.dropDownMenu.removeMovieClip();			this.dropDownMenu = undefined;			this.dropDownMenuMask.removeMovieClip();			this.dropDownMenuMask = undefined;			for (var i in this.linkedCombos){				this.linkedCombos[i].linkedCombo.dataProvider = this.selectedValue[this.linkedCombos[i].dataField];			}		}		return newValue;	}		public function linkTo(combo:ComboBox, dataField:String){		var exists:Boolean = false;		for (var i in this.linkedCombos){			exists = (this.linkedCombos[i] == combo);			if (exists) break;		} 		if (!exists)			this.linkedCombos.push({linkedCombo: combo, dataField: dataField});	}		private function getValue():Object{		return selectedValue;	}		public function get value():Object{		return this.selectedValue;	} 		}